/* 
 * bsh - the Bowdoin Shell
 * 
 * <Khalil Jackson, Diyaa Yaqub>
 */
#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <stdarg.h>

/* Misc constants */
#define MAXLINE    1024   /* max command line size */
#define MAXARGS     128   /* max args on a command line */
#define MAXJOBS      16   /* max jobs at any point in time */

/* Job state constants */
#define UNDEF 0 /* undefined (not an active job) */
#define FG 1    /* running in foreground */
#define BG 2    /* running in background */
#define ST 3    /* stopped */

/* The job struct */
typedef struct job_t {
    pid_t pid;              /* process ID of starting process in the job */
    int jid;                /* job ID [1, 2, ...] */
    int state;              /* current job state: UNDEF, BG, FG, or ST */
    char cmdline[MAXLINE];  /* command line that launched the job */
} job_t;

/* Global variables */
job_t jobs[MAXJOBS];        /* The job list */
int nextjid = 1;            /* next job ID to allocate */
int verbose = 0;            /* whether to print verbose output */
char prompt[] = "bsh> ";    /* command line prompt */
extern char** environ;      /* needed for execve */

/* Function prototypes */

/* Core shell functions */
void eval(char* cmdline);
int parseline(const char* cmdline, char** argv); 
int builtin_cmd(char** argv);
void do_bgfg(char** argv);
void waitfg(pid_t pid);

/* Signal handlers */
void sigchld_handler(int sig);
void sigtstp_handler(int sig);
void sigint_handler(int sig);
void sigquit_handler(int sig);

/* Job list helper functions */
void clearjob(job_t* job);
void initjobs(job_t* jobs);
int maxjid(job_t* jobs); 
int addjob(job_t* jobs, pid_t pid, int state, char* cmdline);
int deletejob(job_t* jobs, pid_t pid); 
pid_t fgpid(job_t* jobs);
job_t* getjobpid(job_t* jobs, pid_t pid);
job_t* getjobjid(job_t* jobs, int jid); 
int pid2jid(pid_t pid); 
void listjobs(job_t* jobs);

/* Other helper functions */
void safe_printf(const char* format, ...);
void error(char* msg);
typedef void handler_t(int);
handler_t* Signal(int signum, handler_t* handler);
void print_usage();

/*
 * main - The shell's main routine 
 */
int main(int argc, char** argv) {
  char cmdline[MAXLINE]; /* buffer to hold a line of input */
  int emit_prompt = 1; /* by default, print shell prompts */

  /* Necessary for the driver to receive all shell output */
  dup2(1, 2);

  /* Parse the command line */
  char c;
  while ((c = getopt(argc, argv, "hvp")) != EOF) {
    switch (c) {
      case 'h':             /* print help message */
        print_usage();
        break;
      case 'v':             /* emit additional diagnostic info */
        verbose = 1;
        break;
      case 'p':             /* don't print a prompt */
        emit_prompt = 0;  /* handy for automatic testing */
        break;
      default:
        print_usage();
        break;
    }
  }

  /* Install the signal handlers */

  Signal(SIGINT,  sigint_handler);  /* ctrl-c */
  Signal(SIGTSTP, sigtstp_handler); /* ctrl-z */
  Signal(SIGCHLD, sigchld_handler); /* Terminated or stopped child */
  Signal(SIGQUIT, sigquit_handler); /* kill the shell on SIGQUIT */

  /* Initialize the job list */
  initjobs(jobs);

  /* Execute the shell's read/eval loop */
  while (1) {

    /* print command prompt, if enabled */
    if (emit_prompt) {
      printf("%s", prompt);
      fflush(stdout);
    }

    /* Read command line from stdin (i.e., regular user input) */
    if ((fgets(cmdline, MAXLINE, stdin) == NULL) && ferror(stdin)) {
      error("fgets error");
    }

    /* Typing ctrl-d indicates EOF (end-of-file); quit the shell */
    if (feof(stdin)) {
      fflush(stdout);
      exit(0);
    }

    /* Evaluate the command line */
    eval(cmdline);

    /* Make sure all output has been printed before continuing */
    fflush(stdout);
    fflush(stdout);
  } 

  exit(0); /* control should never reach here */
}
  
/* 
 * eval - Evaluate the command line that the user has just typed in
 * 
 * If the user has requested a built-in command (quit, jobs, bg, or fg)
 * then execute it immediately. Otherwise, fork a child process and
 * run the job using the child. If the job is to run in the foreground,
 * wait for it to terminate before returning eval.
*/
void eval(char* cmdline) {
  // TODO - implement me!

char* argv[MAXARGS]; // a local array that holds MAXARGS pointers
int bg = parseline(cmdline, argv);

sigset_t mask; 
sigemptyset(&mask);
sigaddset(&mask, SIGCHLD); 

/* Since you are working in C, you will need to create a separate buffer to hold the (larger, prepended) program name. 
Declare the buffer, copy the "/bin/" string into it using strcpy, 
then append the original program name (e.g., "ls") using strcat
*/
//todo UM DID I DO THIS CORRECTLY...

//check if it is a builtin
//if builtin, runs immeditely
int builtIn = builtin_cmd(argv);
if (builtIn) {
	return;
}

char args = argv[0][0];
int argsSize = 0; 
while (args) {
	argsSize++;
	args++;
}
char buffer[argsSize + 6]; //seperate buffer
if (argv[0][0] != '.' && argv[0][0] != '/') {
	strcpy(buffer, "/bin/"); 
	strcat(buffer, argv[0]);
	argv[0] = buffer; 
}

//if its not builtin
if (builtIn == 0) {
	sigprocmask(SIG_BLOCK, &mask, NULL); //block sigchild
	pid_t pidC = fork();
	
	if (pidC == 0) { // if child process
		sigprocmask(SIG_UNBLOCK, &mask, NULL); //if its a child, unblock 
		setpgid(0, 0);
		execve(argv[0], argv, environ); 
	} else {
		//parent (shell process)
		sigprocmask(SIG_UNBLOCK, &mask, NULL); //unblcok sigchild           
		if (bg == 0) { //fg
			addjob(jobs, pidC, FG, cmdline);
			waitfg(pidC);
		}  else {
			addjob(jobs, pidC, BG, cmdline);
			//[20] (500) /bin/ls -l
			int jid = pid2jid(pidC); 
			safe_printf("[%d] (%d) %s", jid, pidC, cmdline);
		}
	}	

	//the parent is the shell prcess
	//if its a parent
	//they need to wait for it to be a 
	//parent adds the new job 
	//wait for 

	//sig suspend  puts shell to sleep until a 
	///when you wake up from sig suspend to check if the foreground 
	//use the jobs list to see if its actually done 

	//when the child finishes, a sigchild will be 
	//sig child will update it appropriately
	//u are still in wait fg, watching hte jobs list to wait for the update 
	//IN WAIT FG you are watching the jobs list, you are actually modifying it when teh sigchild handler runs
	//we will see when it is reflected

	//parent continues to run bsh
//child calls execve
//parent adds to addjob
} 
 return;
}

/* 
 * parseline - Parse the command line and build the argv array.
 * 
 * Characters enclosed in single quotes are treated as a single
 * argument.  Return true if the user has requested a background
 * job or false if the user has requested a foreground job.  
 */
int parseline(const char* cmdline, char** argv) {
  static char array[MAXLINE]; /* holds local copy of command line */
  char* buf = array;          /* ptr that traverses command line */
  char* delim;                /* points to first space delimiter */
  int argc;                   /* number of args */
  int bg;                     /* background job? */

  strcpy(buf, cmdline);
  buf[strlen(buf) - 1] = ' ';  /* replace trailing '\n' with space */
  while (*buf && (*buf == ' ')) { /* ignore leading spaces */
    buf++;
  }

  /* Build the argv list */
  argc = 0;
  if (*buf == '\'') {
    buf++;
    delim = strchr(buf, '\'');
  } else {
    delim = strchr(buf, ' ');
  }

  while (delim) {
    argv[argc++] = buf;
    *delim = '\0';
    buf = delim + 1;
    while (*buf && (*buf == ' ')) { /* ignore spaces */
      buf++;
    }

    if (*buf == '\'') {
      buf++;
      delim = strchr(buf, '\'');
    } else {
      delim = strchr(buf, ' ');
    }
  }
  argv[argc] = NULL;

  if (argc == 0) {  /* ignore blank line */
    return 1;
  }

  /* should the job run in the background? */
  if ((bg = (*argv[argc-1] == '&')) != 0) {
    argv[--argc] = NULL;
  }
  return bg;
}

/* 
 * builtin_cmd - If user types a built-in command, execute it immediately.
 *    Returns true if a built-in command was specified or false otherwise.
 */
int builtin_cmd(char** argv) {
  char* cmd = argv[0];
  if (!strcmp(cmd, "quit")) { /* quit command */
    exit(0);  
  }
  if (!strcmp(cmd, "jobs")) { /* jobs command */
    listjobs(jobs);
    return 1;    
  }
  if (!strcmp(cmd, "bg") || !strcmp(cmd, "fg")) { /* bg and fg commands */
    do_bgfg(argv);
    return 1;
  }
  if (!strcmp(cmd, "&")) { /* ignore & by itself */
    return 1;
  }
  return 0;     /* otherwise, not a builtin command */
}

/* 
 * do_bgfg - Execute the builtin bg and fg commands.
 */
void do_bgfg(char** argv) {
  // TODO - implement me!

//argv[0] is bg and argv[1] is job


//jobs
//if (argv[0] == "bg") {


//getjobjid()

//getjobpid()


//error: running bg without specifying job

//invalid jid to bg

//invlaid jid to bg

//specifying smth other than pid or jid for bg


//bg job


//} 

//if (argv[0] == "fg") {

//}

//if bg <job>
//send sigcont to stopped bg job and continues running in bg
//bg command: stopped --> bg

